<div><h5>13.12.12</h5><h1>On Cruft</h1></div><p>holy shit. twitter bootstrap is 104kb?! and that's the minified version – throw in the minified version of the responsive css file, and you're looking at a payload that is, at the bare minimum, 121kb. you haven't even authored anything, not to mention all those lovely little javascript libraries you love to use. the stylesheet for my agency's ENTIRE WEBSITE comes in at 73kb – for a sprawling, snarling beast of site that (retrospectively) relies far too heavily on absolutely positioned items, and far too little on inheritance. 73kb is already a lot just for the styling of a site – the rock of Gibraltar, perhaps – tack on the bootstrap's 121kb, and it might as well be the goddamn alps you're forcing down the tubes.</p>

<p>'but look at the benefits of all this,' you might counter. 'my development time is kept to the bare minimum, leaving me time for other projects, or maybe even a life outside my computer. I'll gladly shove another couple seconds on the end user while the bootstrap loads to make my life easier. and anyways, what's a couple hundred extra kilobytes between friends?'</p>

<p>wait, seriously?</p>

<p>a disclaimer. if you're like the kid behind kakewalk.se, who built the forum of his site around his insanely brilliant tool of installing OSX on lesser machines, you just want something that works and looks good. building a site is ancillary to the kinds of things your doing, and your users reflect that. they're not there either to bask in the glory of the streamlined machine – if they're there, they've already done that. this article isn't for you.</p>

<p>however, if you're like me, who lays awake in bed at night scheming the best, most elegant way to craft things in CSS, this should enrage you.</p>

<p>let's back up. the entire reason I'm here is because, lying awake in bed last night well after the lady had long checked out, I thought it wise to incorporate some sort of responsive css architecture into my boilerplate. having recently made a site where the client simply didn't have the funds to make a separate mobile-only interface, I think it's kind of a cop out to simply set the meta tag to the page's designed width, loading it to fit in the phone's screen, and forcing the user to zoom and scroll around. in a perfect world, every page should look good everywhere, all the time, no matter the budget. so I set about trying to find something that I can incorporate into my present workflow, that isn't too intrusive, but that still allows for automatic content restructuring. fortunately for me, there is an ocean of architectures out there already, so I'm spoiled for choices. unfortunately, a lot of these accentuate a growing problem that I'm seeing more and more amongst our profession.</p>

<p>cruft.</p>

<p>or rather, useless code that does nothing. every line of code that I've ever authored, at the time of authoring, was, in some way, useful to the greater good. this is not to say that I couldn't go back and do it better –  the more I learn about SASS and closures and all the wondrous bits and pieces people far smarter than I have created, the more I'm perpetually rendering my previous code obsolete. but when I write it, if I don't need it, it's not there. if I do need it, it is. it's as simple as that.</p>

<p>and that's the thing that worries me so about all of these frameworks, libraries included. my precious jquery is an astounding sculpture of functionality, that weighs in at a hefty 93kb when minified. am I really using every last function that jquery sports? or could I too cut out some of the cruft? this is why projects like ender, zepto, and microjs are so very fascinating, as their modularity represents the precise direction where web design so desperately needs to go. unfortunately, until they can claim the browser compatibility and the community presence that jquery can, I'm 'stuck' using the 'beast'.</p>

<p>(as a side note, frameworks like mootools, backbone and underscore appear to be the golden bullet of our age – given that you have the time to author your own plugins. as a programmer, I'm not there yet; but having already created my own boilerplate of HTML and CSS, I creep closer to this conclusion every day: that perhaps I need my own javascript toolbox. and maybe you do, too.)</p>

<p>other such libraries that are not as imperative to your site? specifically, the twitter bootstrap? thumbing through it, we see that there is a whole lot of really great stuff, and there's a whole lot of stuff you'll probably never use. unless you're literally cranking out a website for it to exist as some sort of nexus like the aforementioned kakewalk forum, you should be designing the interactions yourself. I know that I'm picking on the twitter bootstrap a lot here, but if everyone were to adopt it, the web wouldn't be very interesting.</p>

<p>I already have a hard enough time rationalizing the excess weight that sass adds when spitting out an element's full path because I nested something in my SCSS code, when I could have just come up with a clever class name instead, and targeted it selectively. sure, my SCSS file looks great to both myself and other folks who might be tasked with figuring out what the fuck I was getting at; but my thinking is that if you're already using Sass, you should be comfortable enough with CSS that you'd be able to infer context just from a little bit of careful reading. or hey, build your site to be scalable!</p>

<p>nothing pains me more than seeing a laundry list of imported CSS and javascript files populate the resources pane in my developer tools. congratulations, you've pushed a site out the door in record time – and in doing so, you've further polluted the pool with your shitty practices and bloat. HTTP requests, compression, and volume matter, even on desktop sites. how many people get bored and go somewhere else when your site takes longer than necessary to load? how much more business could you do if you took the damn time to properly serve your content? of course, as the HTML5 boilerplate so adorably points out, everything within a given library is 'delete key friendly' – but it would appear that this is a mantra that is scarcely adhered to.</p>

<p>server side code aside, we have to put an end to the cruft, or at least put it on a diet. we can still reach our users the way we've always done it – it just takes a bit of doing. I'm sure that the kinds of things that the twitter bootstrap brings to the table have been lovingly crafted, with many hours invested in their every detail. and I'm sure that they look and work famously. however, in light of the plethora of mostly useless horseshit being flung around the web: we need less easy-bake solutions, and better tools.</p>
